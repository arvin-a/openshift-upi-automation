---
# - name: Create config folder
#   file:
#     state: directory
#     path: "{{ staging_dir }}/configs"
#     mode: "0666"

# - name: Copy pull secret to configs dir
#   copy:
#     content: "{{ pull_secret }}"
#     dest: "{{ staging_dir }}/configs/pull-secret"
#     mode: "0666"




# - name: Copy kubeconfig to configs dir
#   copy:
#     content: "{{ vault_payload.kubeconfig }}"
#     dest: "{{ staging_dir }}/configs/infra-kubeconfig"
#     mode: "0666"


# - name: Copy ssh pub key to configs dir
#   copy:
#     content: "{{ rhcos_ssh_pub_key }}"
#     dest: "{{ staging_dir }}/configs/pub_key"
#     mode: "0666"

# - set_fact:
#     install_arguements: "{{ install_arguements | default ('') + ' --' + item.key + ' ' + item.value + ' '}}"
#   loop: "{{ hypershift_installer_args | dict2items }}"

# - debug:
#     msg:
#       - "HyperShift Cluster params"
#       - "Cluster Type: {{ cluster_type }}"
#       - "Cluster Name: {{ ocp_cluster_name }}"
#       - "Base Domain: {{ base_domain }}"
#       - "Infra cluster storage class: {{ infra_cluster_fast_storage_class_name }}"
#       - "Infra cluster name: {{ infra_cluster_name }}"
#       - "Install Arguements: {{ install_arguements }}"


# - debug:
#     msg: "{{ hypershift_cli_path }} create cluster {{ cluster_type }} --name {{ ocp_cluster_name }} --base-domain {{ base_domain }} --pull-secret {{ staging_dir }}/configs/pull-secret --etcd-storage-class {{ infra_cluster_fast_storage_class_name }} --infra-id {{ infra_cluster_name }}  --ssh-key {{ staging_dir }}/configs/pub_key {{ install_arguements }}"

# - name: Run Hypershift Installer
#   shell:
#     cmd: "{{ hypershift_cli_path }} create cluster {{ cluster_type }} --name {{ ocp_cluster_name }} --base-domain {{ base_domain }} --pull-secret {{ staging_dir }}/configs/pull-secret --etcd-storage-class {{ infra_cluster_fast_storage_class_name }} --infra-id {{ infra_cluster_name }}  --ssh-key {{ staging_dir }}/configs/pub_key {{ install_arguements }}"

- name: Patch Infra cluster to allow wildcard policy
  vars:
    patchstr: '[{ "op": "add", "path": "/spec/routeAdmission", "value": {wildcardPolicy: "WildcardsAllowed"}}]'
  shell:
    cmd: "oc patch ingresscontroller -n openshift-ingress-operator default --type=json -p '{{ patchstr }}'"


- name: Create HyperShift Cluster namespace and pull secret
  k8s:
    state: present
    definition: "{{ lookup('template', item) }}"
  loop:
    - "01-hypershift-ns.yaml"
    - "02-hypershift-pull-secret.yaml"

# Create htpasswd secret for hyperhift cluster
- name: Create htpasswd secret for the cluster
  shell:
    cmd: "oc create secret generic htpass-secret-{{ ocp_cluster_name }} --from-file=htpasswd={{ role_path }}/files/users.htpasswd -n clusters --dry-run=client -o yaml | oc apply -f -"

- name: Create HyperShift Cluster using templated yamls
  k8s:
    state: present
    definition: "{{ lookup('template', item) }}"
  loop:
    - "03-hypershift-ssh-key-secret.yaml"
    - "04-hypershift-Hosted-Cluster.yaml"
    - "05-hypershift-node-pool.yaml"

- name: Wait until apiserver is available
  vars:
    jsonfilter: '{.status.conditions[?(@.type=="Available")].status}'
  shell:
    cmd: "oc get --namespace clusters hostedclusters {{ ocp_cluster_name }} -o=jsonpath='{{ jsonfilter }}'"
  register: apiserver_available
  until: apiserver_available.stdout  == "True"
  retries: 100
  delay: 5

- name: Save kubeconfig of Hypershift cluster
  shell:
    cmd: "oc -n {{ infra_cluster_tenant_namespace }} get secret admin-kubeconfig  -o json -o=jsonpath='{.data.kubeconfig}' | base64 -d > {{ cluster_kubeconfig }}"
  register: kubeconfig_data

- include_role:
    name: openshift-credentials-store
  vars: 
    path: "{{ ocp_cluster_name }}"
    data: 
      kubeconfig: "{{ lookup('file', cluster_kubeconfig) | b64encode }}"

- name: Make users cluster admin
  shell: |
    oc --kubeconfig={{ cluster_kubeconfig }} adm policy add-cluster-role-to-user cluster-admin arvin &> /dev/null
  register: cluster_admin_cmd
  until: cluster_admin_cmd.rc  == 0
  retries: 10
  delay: 10
  
- include_tasks: create-ingress.yaml

- name: Wait until cluster is fully up
  vars:
    jsonfilter: '{.status.version.history[0].state}'
  shell:
    cmd: "oc get --namespace clusters hostedclusters {{ ocp_cluster_name }} -o=jsonpath='{{ jsonfilter }}'"
  register: apiserver_available
  until: apiserver_available.stdout  == "Completed"
  retries: 240
  delay: 10

- name: Get console url
  shell:
    cmd: "oc  --kubeconfig {{ cluster_kubeconfig }} whoami --show-console"
  register: console_url_result
