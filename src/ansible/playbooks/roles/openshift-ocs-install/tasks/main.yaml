---

- name: Label Worker Nodes
  shell: |
    oc label node worker1 cluster.ocs.openshift.io/openshift-storage='' --overwrite
    oc label node worker2 cluster.ocs.openshift.io/openshift-storage='' --overwrite
    oc label node worker3 cluster.ocs.openshift.io/openshift-storage='' --overwrite


- name: Create Local Storage Namespace
  k8s:
    state: present
    definition: "{{ lookup('template', '01-local-storage-ns.yaml') }}"

- name: Create Local Storage Operator Group
  k8s:
    state: present
    definition: "{{ lookup('template', '02-local-storage-og.yaml') }}"


- name: Create Local Storage Operator Subscription
  k8s:
    state: present
    definition: "{{ lookup('template', '03-local-storage-sub.yaml') }}"


- name: Wait until Local Storage CSV has succeeded
  shell:
    cmd: oc get csv $(oc get csv -n openshift-local-storage -o custom-columns=NAME:.metadata.name | grep local-storage) -n openshift-local-storage -o=jsonpath='{.status.phase}'
  register: result
  until: result.stdout == "Succeeded"
  retries: 100
  delay: 5


- name: Create Local Storage Volumes
  k8s:
    state: present
    definition: "{{ lookup('template', '04-local-storage-lv.yaml') }}"


- name: Wait until Local Storage PVs are available
  shell:
    cmd: oc get pv | grep local-pv | wc -l
  register: result
  until: result.stdout == "2"
  retries: 100
  delay: 10


- name: Create OCS Namespace
  k8s:
    state: present
    definition: "{{ lookup('template', '05-ocs-ns.yaml') }}"

- name: Create OCS Operator Group
  k8s:
    state: present
    definition: "{{ lookup('template', '06-ocs-og.yaml') }}"

- name: Create OCS Subscription
  k8s:
    state: present
    definition: "{{ lookup('template', '07-ocs-sub.yaml') }}"

- name: sleep for 20 seconds
  wait_for:
    timeout: 20

- name: Wait until OCS CSV has succeeded before continueing
  shell:
    cmd: oc get csv $(oc get subscriptions ocs-operator -o=jsonpath='{.status.currentCSV}' -n openshift-storage) -n openshift-storage -o=jsonpath='{.status.phase}'
  register: result
  until: result.stdout == "Succeeded"
  retries: 100
  delay: 10


- name: Create OCS Cluster
  k8s:
    state: present
    definition: "{{ lookup('template', '08-ocs-create-cluster.yaml') }}"


- name: Wait until OCS Cluster is ready
  shell:
    cmd: oc get StorageCluster ocs-storagecluster -n openshift-storage -o=jsonpath='{.status.phase}'
  register: result
  until: result.stdout == "Ready"
  retries: 100
  delay: 10

- name: Set CephFS as the default storage class
  shell: |
   oc patch storageclass ocs-storagecluster-cephfs -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class": "true"}}}'
